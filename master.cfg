# -*- python -*-
# ex: set syntax=python:

import os, json, errno
from textwrap import dedent, wrap
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.plugins import buildslave, schedulers, status, steps, util
from buildbot.changes.filter import ChangeFilter


def notify(tmpl, *args, **kw):
    """Print a big obvious banner. Reformats msg to allow indented triple-strings."""
    msg = tmpl.format(*args, **kw)
    print ' ***'
    print ' *** ' + ('\n *** '.join(wrap(dedent(msg))).strip())
    print ' ***'

def _read_path(path):
    with file(path, 'r') as f:
        return f.read()

def read_optional_path(path):
    try:
        return _read_path(path)
    except IOError as e:
        if e.errno == errno.ENOENT:
            return None
        else:
            raise

def read_required_path(path, description):
    result = read_optional_path(path)
    if result is not None:
        return result

    print ' ***'
    print ' *** Could not read: {!r}'.format(path)
    notify(description)
    e = IOError('{}: {!r}'.format(os.strerror(errno.ENOENT), path))
    e.errno = errno.ENOENT
    raise e

def read_or_generate_secret(path, githubsecret):
    result = read_optional_path(path)
    if result is not None:
        return result

    # File doesn't exist:
    SECRET_BYTES = 10
    value = os.urandom(SECRET_BYTES).encode('base64').strip().rstrip('=')
    with file(path, 'w') as f:
        f.write(value)

    if githubsecret:
        notify(
            '''
            NOTE: The secret {!r} was just auto-generated. You must
            configure the relevant github repositories and add it as
            the webhook secret.
            ''',
            path)

    return value

def load_webcreds(path):
    filedesc = 'A json file with an array, each element is [username, password]'
    jsoncreds = json.loads(read_required_path(path, filedesc))
    creds = []
    try:
        for entry in jsoncreds:
            [username, password] = entry
            username = username.encode('utf8')
            password = password.encode('utf8')
            entry = (username, password)
            creds.append(entry)
    except:
        notify(
            'There was a JSON format error loading {!r}, which should be: {}',
            path,
            filedesc,
        )
        raise
    else:
        return creds

def sh(*argv, **kw):
    name = kw.pop('name', os.path.basename(argv[0]))
    assert kw == {}, 'Unexpected keywords: {!r}'.format(kw)
    return steps.ShellCommand(
        name=name,
        description=name,
        command=argv,
        timeout=None,
    )


eu = os.path.expanduser

# Read some external configuration to help with
# credentials-config-management:
SLAVE_NAME = 'builder-0'
SLAVE_PASS = read_or_generate_secret(eu('~/slave.password'), False)
GH_WEBHOOK_SECRET = read_or_generate_secret(eu('~/github.webhook-secret'), True)
GH_STATUS_TOKEN = read_required_path(
    eu('~/github.status-secret'),
    'This path must contain a GitHub token granting status update capabilities.',
)
WEB_CREDS = load_webcreds(eu('~/webcreds.json'))


BuildmasterConfig = {
    'title': "zcash",
    'titleURL': "https://github.com/Electric-Coin-Company/zcash",
    'buildbotURL': "http://ci.leastauthority.com:8010/",
    'db': { 'db_url' : "sqlite:///state.sqlite" },
    'protocols': {'pb': {'port': 9899}},

    'change_source': [],

    # Here's where we use the 'project' attribute to decide which
    # builder the change event should trigger.
    'schedulers': [
        schedulers.AnyBranchScheduler(
            name="libzerocash-any-branch-45s",
            treeStableTimer=45,
            change_filter=ChangeFilter(
                project="Electric-Coin-Company/libzerocash",
            ),
            builderNames=["libzerocash"],
        ),
        schedulers.AnyBranchScheduler(
            name="zcash-any-branch-45s",
            treeStableTimer=45,
            change_filter=ChangeFilter(
                project="Electric-Coin-Company/zcash",
            ),
            builderNames=["zcash"],
        ),
        # FIXME: Do we have to fix the force scheduler in the same way?
        schedulers.ForceScheduler(
            name="force",
            builderNames=["libzerocash", "zcash"],
        ),
    ],

    'builders': [
        util.BuilderConfig(
            name="zcash",
            slavenames=[SLAVE_NAME],
            factory=util.BuildFactory([
                steps.Git(
                    repourl='git@github.com:Electric-Coin-Company/zcash',
                    mode='incremental',
                ),
                sh('git', 'clean', '-dfx', name='git clean'),
                sh('./zcutil/build.sh', '-j4'),
                sh('sh', '-c',
                   'if [ -f ./zcutil/fetch-params.sh ]; then ./zcutil/fetch-params.sh; fi',
                   name='fetch-params.sh (optional)'),
                sh('./qa/zerocash/full-test-suite.sh',
                   '/data/zc-testnet-alpha-proving.key',
                   '/data/zc-testnet-alpha-verification.key'),
            ]),
            properties={
                "github_repo_owner": "Electric-Coin-Company",
                "github_repo_name": "zcash",
            },
        ),
        util.BuilderConfig(
            name="libzerocash",
            slavenames=[SLAVE_NAME],
            factory=util.BuildFactory([
                steps.Git(
                    repourl='https://github.com/Electric-Coin-Company/libzerocash',
                    mode='incremental',
                ),
                sh('git', 'clean', '-dfx', name='git clean'),
                sh('./get-libsnark'),
                sh('make', '-j4'),
                sh('./tests/full-test-suite.sh'),
            ]),
            properties={
                "github_repo_owner": "Electric-Coin-Company",
                "github_repo_name": "libzerocash",
            },
        ),
    ],

    'status': [
        html.WebStatus(
            http_port=8010,
            authz=authz.Authz(
                auth=auth.BasicAuth(WEB_CREDS),
                gracefulShutdown = False,
                forceBuild = 'auth', # use this to test your slave once it is set up
                forceAllBuilds = 'auth',  # ..or this
                pingBuilder = 'auth',
                stopBuild = 'auth',
                stopAllBuilds = 'auth',
                cancelPendingBuild = 'auth',
            ),
            change_hook_dialects={
                'github': {
                    'secret': GH_WEBHOOK_SECRET,
                    'strict': True,
                },
            },
        ),
        status.IRC(
            host='irc.oftc.net',
            nick='zcbuildbot',
            channels=['#zcash'],
            notify_events={
                'exception': True,
                'failure': True,
                'finished': True,
                'started': True,
                'success': True,
            },
        ),
        status.GitHubStatus(
            token=GH_STATUS_TOKEN,
            repoOwner=util.Interpolate("%(prop:github_repo_owner)s"),
            repoName=util.Interpolate("%(prop:github_repo_name)s"),
            sha=util.Interpolate("%(src::revision)s"),
            startDescription='Build started.',
            endDescription='Build done.',
        ),
    ],

    'slaves': [
        buildslave.BuildSlave(SLAVE_NAME, SLAVE_PASS),
    ],
}
