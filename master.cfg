# -*- python -*-
# ex: set syntax=python:

import os, json, errno
from textwrap import dedent
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.plugins import buildslave, changes, schedulers, status, steps, util
from buildbot.changes.filter import ChangeFilter
from buildbot.plugins import status, util


def read_path(path):
    with file(os.path.expanduser(path), 'r') as f:
        return r.read()

def read_or_generate_secret(path, githubsecret):
    try:
        return read_path(path)
    except IOError as e:
        if e.errno != errno.ENOENT:
            raise
    # File doesn't exist:
    SECRET_BYTES = 10
    value = os.urandom(SECRET_BYTES).encode('base64').strip().rstrip('=')
    with file(path, 'w') as f:
        f.write(value)

    if githubsecret:
        print dedent('''
            NOTE: The secret {!r} was just auto-generated. You must
            configure the relevant github repositories and add it as
            the webhook secret.'
        '''.strip())

    return value


def sh(*argv, **kw):
    name = kw.pop('name', os.path.basename(argv[0]))
    assert kw == {}, 'Unexpected keywords: {!r}'.format(kw)
    return steps.ShellCommand(name=name, description=name, command=argv)


# Read some external configuration to help with
# credentials-config-management:
SLAVE_NAME = read_path('~/slave.name')
SLAVE_PASS = read_or_generate_secret('~/slave.password', false)
GH_WEBHOOK_SECRET = read_or_generate_secret('~/github.webhook-secret', true)
GH_STATUS_TOKEN = read_path('~/github.status-secret')
WEB_CREDS = json.loads(read_path('~/webcreds.json'))


BuildmasterConfig = {
    'title': "zerocashd",
    'titleURL': "https://github.com/Electric-Coin-Company/zerocashd",
    'buildbotURL': "http://ci.leastauthority.com:8010/",
    'db': { 'db_url' : "sqlite:///state.sqlite" },
    'protocols': {'pb': {'port': 9899}},

    # We use the 'project' attribute to tag changes with either libzerocash
    # or zerocashd, depending on which repository they came from. We have
    # to do this because Buildbot's default mode is to pass all changes
    # to all schedulers, which means zerocashd changes will cause
    # the libzerocash builder to run. 
    #
    # Changes from the GitHub WebStatus change hook come in with the project
    # attribute already set, which is of the form...
    #   Electric-Coin-Company/libzerocash
    # ...so we make these pollers use exactly the same syntax.
    'change_source': [
        ## Disabled the pollers since the webhook is sufficient.
        # changes.GitPoller(
        #     'https://github.com/Electric-Coin-Company/libzerocash',
        #     workdir='libzc-gitpoller-workdir',
        #     branches=True,
        #     pollinterval=300,
        #     project='Electric-Coin-Company/libzerocash',
        # ),
        # changes.GitPoller(
        #     'git@github.com:Electric-Coin-Company/zerocashd',
        #     workdir='zc-gitpoller-workdir',
        #     branches=True,
        #     pollinterval=300,
        #     project='Electric-Coin-Company/zerocashd',
        # ),
    ],

    # Here's where we use the 'project' attribute to decide which
    # builder the change event should trigger.
    'schedulers': [
        schedulers.AnyBranchScheduler(
            name="libzerocash-any-branch-45s",
            treeStableTimer=45,
            change_filter=ChangeFilter(
                project="Electric-Coin-Company/libzerocash",
            ),
            builderNames=["libzerocash"],
        ),
        schedulers.AnyBranchScheduler(
            name="zerocashd-any-branch-45s",
            treeStableTimer=45,
            change_filter=ChangeFilter(
                project="Electric-Coin-Company/zerocashd",
            ),
            builderNames=["zerocashd"],
        ),
        # FIXME: Do we have to fix the force scheduler in the same way?
        schedulers.ForceScheduler(
            name="force",
            builderNames=["libzerocash", "zerocashd"],
        ),
    ],

    'builders': [
        util.BuilderConfig(
            name="zerocashd",
            slavenames=["example-slave"],
            factory=util.BuildFactory([
                steps.Git(
                    repourl='git@github.com:Electric-Coin-Company/zerocashd',
                    mode='incremental',
                ),
                sh('./zcutil/build.sh', '-j4'),
                sh('./qa/zerocash/full-test-suite.sh'),
            ]),
            properties={
                "github_repo_owner": "Electric-Coin-Company",
                "github_repo_name": "zerocashd",
            },
        ),
        util.BuilderConfig(
            name="libzerocash",
            slavenames=["example-slave"],
            factory=util.BuildFactory([
                steps.Git(
                    repourl='https://github.com/Electric-Coin-Company/libzerocash',
                    mode='incremental',
                ),
                sh('./get-libsnark'),
                sh('make', '-j4'),
                sh('./tests/merkleTest'),
                sh('./tests/zerocashTest'),
                sh('./zerocash_pour_ppzksnark/tests/test_zerocash_pour_ppzksnark'),
            ]),
            properties={
                "github_repo_owner": "Electric-Coin-Company",
                "github_repo_name": "libzerocash",
            },
        ),
    ],

    'status': [
        html.WebStatus(
            http_port=8010,
            authz=authz.Authz(
                auth=auth.BasicAuth(WEB_CREDS),
                gracefulShutdown = False,
                forceBuild = 'auth', # use this to test your slave once it is set up
                forceAllBuilds = 'auth',  # ..or this
                pingBuilder = 'auth',
                stopBuild = 'auth',
                stopAllBuilds = 'auth',
                cancelPendingBuild = 'auth',
            ),
            change_hook_dialects={
                'github': {
                    'secret': GH_WEBHOOK_SECRET,
                    'strict': True,
                },
            },
        ),
        status.IRC(
            host='irc.oftc.net',
            nick='zcbuildbot',
            channels=['#leastauthority'],
            notify_events={
                'exception': True,
                'failure': True,
                'finished': True,
                'started': True,
                'success': True,
            },
        ),
        status.GitHubStatus(
            token='REDACTED',
            repoOwner=util.Interpolate("%(prop:github_repo_owner)s"),
            repoName=util.Interpolate("%(prop:github_repo_name)s"),
            sha=util.Interpolate("%(src::revision)s"),
            startDescription='Build started.',
            endDescription='Build done.',
        ),
    ],

    'slaves': [
        buildslave.BuildSlave(SLAVE_NAME, SLAVE_PASS),
    ],
}
